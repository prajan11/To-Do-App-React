{"version":3,"sources":["ToDoForm/ToDoForm.js","ToDoListItems/ToDoListItems.js","ToDoList/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["toDoForm","props","className","id","type","placeholder","addItemChanged","item","editItem","onClick","editItemClick","addItemClick","toDoListItem","item_name","title","editListItem","deleteListItem","toDoList","itemList","map","ind_list_item","index","key","editItemIndex","clearList","App","state","todoItem","ind_item","edit_item","edit_item_index","toDoItemChanged","event","setState","target","value","addItemToList","trim","inputtedToDoItem","toDoItemUpdated","clearToDoList","newToDoList","filter","itemToEdit","splice","editItemFromList","updatedToDo","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec022a34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ToDoForm.css\";\r\n\r\nconst toDoForm = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>ToDo Input Form</h2> <br />\r\n      <div className=\"ToDoInputForm\">\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">\r\n              <i className=\"fas fa-keyboard\"></i>\r\n            </span>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Username\"\r\n            placeholder=\"Enter the item to add to do\"\r\n            onChange={props.addItemChanged}\r\n            value={props.item}\r\n          />\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          {props.editItem ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"form-control btn btn-success\"\r\n              onClick={props.editItemClick}\r\n            >\r\n              <i className=\"fas fa-plus\"></i> Edit Item\r\n            </button>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              className=\"form-control btn btn-primary\"\r\n              onClick={props.addItemClick}\r\n            >\r\n              <i className=\"fas fa-plus\"></i> Add Item\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default toDoForm;\r\n","import React from \"react\";\r\nimport \"./ToDoListItem.css\";\r\n\r\nconst toDoListItem = (props) => {\r\n  return (\r\n    <div className={props.editItem ? \"editBackground\" : \"\"}>\r\n      <div className=\"ListItem\">\r\n        {props.item_name}\r\n        <div className=\"edit-remove-buttons\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-success\"\r\n            title=\"Edit\"\r\n            onClick={props.editListItem}\r\n          >\r\n            <i className=\"fas fa-edit\"></i>\r\n          </button>\r\n          {props.editItem ? (\r\n            \"\"\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm btn-danger ml-1\"\r\n              title=\"Delete\"\r\n              onClick={props.deleteListItem}\r\n            >\r\n              <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default toDoListItem;\r\n","import React from \"react\";\r\nimport \"./ToDoList.css\";\r\nimport ToDoListItem from \"../ToDoListItems/ToDoListItems.js\";\r\n\r\nconst toDoList = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>ToDo List</h2>\r\n      <div className=\"ToDoListContainer\">\r\n        {props.itemList.map((ind_list_item, index) => {\r\n          return (\r\n            <ToDoListItem\r\n              item_name={ind_list_item.item}\r\n              id={index}\r\n              key={index}\r\n              editItem={props.editItemIndex === index ? true : false}\r\n              deleteListItem={() => props.deleteListItem(index)}\r\n              editListItem={() => props.editListItem(index)}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn form-control btn-danger mt-4\"\r\n          onClick={props.clearList}\r\n        >\r\n          <i className=\"fas fa-minus-circle\"></i> Clear List\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default toDoList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ToDoForm from \"./ToDoForm/ToDoForm.js\";\nimport ToDoList from \"./ToDoList/ToDoList.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  state = {\n    todoItem: [],\n    id: 0,\n    ind_item: \"\",\n    edit_item: false,\n    edit_item_index: null,\n  };\n\n  toDoItemChanged = (event) => {\n    this.setState({\n      ind_item: event.target.value,\n    });\n  };\n\n  addItemToList = () => {\n    if (this.state.ind_item.trim() !== \"\") {\n      const inputtedToDoItem = {\n        id: this.state.id,\n        item: this.state.ind_item,\n      };\n\n      const toDoItemUpdated = [...this.state.todoItem, inputtedToDoItem];\n\n      this.setState({\n        todoItem: toDoItemUpdated,\n        ind_item: \"\",\n      });\n    }\n  };\n\n  clearToDoList = () => {\n    this.setState({\n      todoItem: [],\n    });\n  };\n\n  deleteListItem = (id) => {\n    const newToDoList = this.state.todoItem.filter((ind_item, index) => {\n      return index !== id;\n    });\n    this.setState({\n      todoItem: newToDoList,\n    });\n  };\n\n  editListItem = (id) => {\n    const copyOfToDoList = [...this.state.todoItem];\n    const itemToEdit = copyOfToDoList.splice(id, 1)[0].item;\n\n    this.setState({\n      ind_item: itemToEdit,\n      edit_item: true,\n      edit_item_index: id,\n    });\n  };\n\n  editItemFromList = () => {\n    if (this.state.edit_item_index !== null) {\n      const copyOfToDoItem = [...this.state.todoItem];\n      const updatedToDo = copyOfToDoItem.map((ind_item, index) => {\n        if (this.state.edit_item_index === index) {\n          ind_item.item = this.state.ind_item;\n        }\n        return ind_item;\n      });\n      this.setState({\n        todoItem: updatedToDo,\n        edit_item_index: null,\n        ind_item: \"\",\n        edit_item: false,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br />\n        <ToDoForm\n          addItemChanged={this.toDoItemChanged}\n          addItemClick={this.addItemToList}\n          item={this.state.ind_item}\n          editItem={this.state.edit_item}\n          editItemClick={this.editItemFromList}\n        />\n        <br />\n        <br />\n        <ToDoList\n          itemList={this.state.todoItem}\n          editItemIndex={this.state.edit_item_index}\n          clearList={this.clearToDoList}\n          deleteListItem={this.deleteListItem}\n          editListItem={this.editListItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}